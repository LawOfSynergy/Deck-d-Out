/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package card.scanner.gui;

import java.awt.EventQueue;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;

import javax.swing.BorderFactory;
import javax.swing.DefaultListSelectionModel;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.LayoutStyle;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.WindowConstants;
import javax.swing.border.BevelBorder;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

import card.scanner.model.Card;
import card.scanner.model.CardProcessor;
import card.scanner.model.FileMapping;


/**
 *
 * @author kstimson
 */
public class CardProcessorFrame extends JFrame {
	private static final long serialVersionUID = 1L;

	// Variables declaration - do not modify                     
	private CardViewPanel cardViewPanel;
	private JTextField commentField;
	private JLabel commentLabel;
	private JTextField costField;
	private JButton downButton;
	private JMenu fileMenu;
	private JMenu helpMenu;
	private JTable infoTable;
	private JMenuBar jMenuBar1;
	private JScrollPane jScrollPane2;
	private JTextField nameField;
	private JButton scanDeckButton;
	private JTextField setField;
	private JMenu settingsMenu;
	private JLabel totalCostLabel;
	private JLabel totalCountLabel;
	private JButton upButton;
	private JMenu viewMenu;
	private JMenuItem workspaceSelectionMenuItem;
	// End of variables declaration   

	private CardProcessor processor = null;
	private FileMapping[] cards;


	/**
	 * Creates new form CardProcessorFrame
	 */
	public CardProcessorFrame() {
		initComponents();

		processor = new CardProcessor(this);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	private void initComponents() {
		//
		//        cardViewPanel = new CardViewPanel();
		//        nameField = new JTextField();
		//        setField = new JTextField();
		//        costField = new JTextField();
		//        upButton = new JButton();
		//        downButton = new JButton();
		//        totalCountLabel = new JLabel();
		//        totalCostLabel = new JLabel();
		//        scanDeckButton = new JButton();
		//        commentLabel = new JLabel();
		//        commentField = new JTextField();
		//        jScrollPane2 = new JScrollPane();
		//        infoTable = new JTable();
		//        jMenuBar1 = new JMenuBar();
		//        fileMenu = new JMenu();
		//        viewMenu = new JMenu();
		//        settingsMenu = new JMenu();
		//        workspaceSelectionMenuItem = new JMenuItem();
		//        helpMenu = new JMenu();
		//
		//        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
		//        setTitle("Deck'd Out");
		//
		//        cardViewPanel.setBorder(BorderFactory.createBevelBorder(BevelBorder.LOWERED));
		//
		//        javax.swing.GroupLayout cardViewPanelLayout = new javax.swing.GroupLayout(cardViewPanel);
		//        cardViewPanel.setLayout(cardViewPanelLayout);
		//        cardViewPanelLayout.setHorizontalGroup(
		//            cardViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
		//            .addGap(0, 0, Short.MAX_VALUE)
		//        );
		//        cardViewPanelLayout.setVerticalGroup(
		//            cardViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
		//            .addGap(0, 0, Short.MAX_VALUE)
		//        );
		//
		//        nameField.setEditable(false);
		//        nameField.setText("Diabolic Tutor");
		//
		//        setField.setEditable(false);
		//        setField.setText("M12");
		//        
		//        costField.setEditable(false);
		//        costField.setText("$50.00");
		//
		//        upButton.setText("Up");
		//        upButton.addActionListener(new ActionListener(){
		//        	public void actionPerformed(ActionEvent evt){
		//        		upButtonActionPerformed(evt);
		//        	}
		//        });
		////        upButton.setEnabled(false);
		//
		//        downButton.setText("Down");
		//        downButton.addActionListener(new ActionListener() {
		//            public void actionPerformed(ActionEvent evt) {
		//                downButtonActionPerformed(evt);
		//            }
		//        });
		////        downButton.setEnabled(false);
		//
		//        totalCountLabel.setText("Card Count: 0");
		//
		//        totalCostLabel.setText("Value of Scanned Cards: 0.00");
		//
		//        scanDeckButton.setText("Scan Deck");
		//        scanDeckButton.setActionCommand("Scan Deck");
		//        scanDeckButton.addActionListener(new ActionListener() {
		//            public void actionPerformed(ActionEvent evt) {
		//                scanDeckButtonActionPerformed(evt);
		//            }
		//        });
		//
		//        commentLabel.setText("Comments: ");
		//
		//        commentField.setEditable(false);
		//        commentField.setText("Under Development");
		//
		//        infoTable.setModel(new DefaultTableModel(
		//            new Object [][] {
		//
		//            },
		//            new String [] {
		//                "Title", "Set", "Cost"
		//            }
		//        ) {
		//            
		//			private static final long serialVersionUID = 1L;
		//			
		//			@SuppressWarnings("rawtypes")
		//			Class[] types = new Class [] {
		//                String.class, String.class, String.class
		//            };
		//            boolean[] canEdit = new boolean [] {
		//                false, false, false
		//            };
		//
		//            @SuppressWarnings("rawtypes")
		//			public Class getColumnClass(int columnIndex) {
		//                return types [columnIndex];
		//            }
		//
		//            public boolean isCellEditable(int rowIndex, int columnIndex) {
		//                return canEdit [columnIndex];
		//            }
		//        });
		//        infoTable.setColumnSelectionAllowed(false);
		//        infoTable.setRowSelectionAllowed(true);
		//        infoTable.getTableHeader().setReorderingAllowed(false);
		//        jScrollPane2.setViewportView(infoTable);
		//        infoTable.getColumnModel().getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		//        infoTable.getSelectionModel().addListSelectionListener(new SelectionHandler());
		//
		//        fileMenu.setText("File");
		//        jMenuBar1.add(fileMenu);
		//
		//        viewMenu.setText("View");
		//        jMenuBar1.add(viewMenu);
		//
		//        settingsMenu.setText("Settings");
		//
		//        workspaceSelectionMenuItem.setMnemonic('w');
		//        workspaceSelectionMenuItem.setText("Workspace");
		//        workspaceSelectionMenuItem.setToolTipText("Select where the application reads images from.");
		//        workspaceSelectionMenuItem.addActionListener(new ActionListener(){
		//        	public void actionPerformed(ActionEvent evt){
		//        		workspaceSelectButtonActionPerformed(evt);
		//        	}
		//        });
		//        settingsMenu.add(workspaceSelectionMenuItem);
		//
		//        jMenuBar1.add(settingsMenu);
		//
		//        helpMenu.setText("Help");
		//        jMenuBar1.add(helpMenu);
		//
		//        setJMenuBar(jMenuBar1);
		//
		//        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		//        getContentPane().setLayout(layout);
		//        layout.setHorizontalGroup(
		//            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
		//            .addGroup(layout.createSequentialGroup()
		//                .addContainerGap()
		//                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
		//                    .addComponent(cardViewPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
		//                    .addGroup(layout.createSequentialGroup()
		//                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
		//                            .addGroup(layout.createSequentialGroup()
		//                                .addComponent(commentLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
		//                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
		//                                .addComponent(commentField, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
		//                            .addGroup(layout.createSequentialGroup()
		//                                .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
		//                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
		//                                .addComponent(setField)))
		//                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
		//                        .addComponent(costField, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))
		//                .addGap(15, 15, 15)
		//                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
		//                    .addGroup(layout.createSequentialGroup()
		//                        .addGap(19, 19, 19)
		//                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
		//                            .addComponent(downButton)
		//                            .addComponent(upButton, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
		//                        .addGap(18, 18, 18)
		//                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
		//                            .addGroup(layout.createSequentialGroup()
		//                                .addComponent(totalCountLabel)
		//                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
		//                                .addComponent(totalCostLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
		//                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
		//                        .addContainerGap())
		//                    .addGroup(layout.createSequentialGroup()
		//                        .addComponent(scanDeckButton, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
		//                        .addGap(57, 57, 57))))
		//        );
		//        layout.setVerticalGroup(
		//            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
		//            .addGroup(layout.createSequentialGroup()
		//                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
		//                    .addGroup(layout.createSequentialGroup()
		//                        .addContainerGap()
		//                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
		//                            .addComponent(jScrollPane2)
		//                            .addComponent(cardViewPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
		//                    .addGroup(layout.createSequentialGroup()
		//                        .addGap(142, 142, 142)
		//                        .addComponent(upButton)
		//                        .addGap(120, 120, 120)
		//                        .addComponent(downButton)))
		//                .addGap(18, 18, Short.MAX_VALUE)
		//                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
		//                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
		//                        .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
		//                        .addComponent(setField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
		//                        .addComponent(costField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
		//                    .addComponent(totalCountLabel)
		//                    .addComponent(totalCostLabel))
		//                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
		//                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
		//                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
		//                        .addComponent(commentLabel)
		//                        .addComponent(commentField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
		//                    .addComponent(scanDeckButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
		//                .addContainerGap(18, Short.MAX_VALUE))
		//        );
		//
		//        pack();

		cardViewPanel = new CardViewPanel();
		nameField = new JTextField();
		setField = new JTextField();
		costField = new JTextField();
		upButton = new JButton();
		downButton = new JButton();
		totalCountLabel = new JLabel();
		totalCostLabel = new JLabel();
		scanDeckButton = new JButton();
		commentLabel = new JLabel();
		commentField = new JTextField();
		jScrollPane2 = new JScrollPane();
		infoTable = new JTable();
		jMenuBar1 = new JMenuBar();
		fileMenu = new JMenu();
		viewMenu = new JMenu();
		settingsMenu = new JMenu();
		workspaceSelectionMenuItem = new JMenuItem();
		helpMenu = new JMenu();

		setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
		setTitle("Deck'd Out");

		cardViewPanel.setBorder(BorderFactory.createBevelBorder(BevelBorder.LOWERED));

		GroupLayout cardViewPanelLayout = new GroupLayout(cardViewPanel);
		cardViewPanel.setLayout(cardViewPanelLayout);
		cardViewPanelLayout.setHorizontalGroup(
				cardViewPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
				.addGap(0, 0, Short.MAX_VALUE)
				);
		cardViewPanelLayout.setVerticalGroup(
				cardViewPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
				.addGap(0, 0, Short.MAX_VALUE)
				);

		nameField.setEditable(false);
		nameField.setText("Diabolic Tutor");

		setField.setEditable(false);
		setField.setText("M12");

		costField.setEditable(false);
		costField.setText("$50.00");

		upButton.setText("Up");
		upButton.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent evt){
				upButtonActionPerformed(evt);
			}
		});


		downButton.setText("Down");
		downButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				downButtonActionPerformed(evt);
			}
		});

		totalCountLabel.setText("Card Count: 250");

		totalCostLabel.setText("Value of Scanned Cards: $800.00");

		scanDeckButton.setText("Scan Deck");
		scanDeckButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				scanDeckButtonActionPerformed(evt);
			}
		});

		commentLabel.setText("Comments: ");

		commentField.setEditable(false);
		commentField.setText("Under Development");

		infoTable.setModel(new DefaultTableModel(
				new Object [][] {

				},
				new String [] {
						"Title", "Set", "Cost"
				}
				) {

			private static final long serialVersionUID = 1L;

			@SuppressWarnings("rawtypes")
			Class[] types = new Class [] {
				String.class, String.class, String.class
			};
			boolean[] canEdit = new boolean [] {
					false, false, false
			};

			@SuppressWarnings("rawtypes")
			public Class getColumnClass(int columnIndex) {
				return types [columnIndex];
			}

			public boolean isCellEditable(int rowIndex, int columnIndex) {
				return canEdit [columnIndex];
			}
		});
		infoTable.setColumnSelectionAllowed(false);
		infoTable.setRowSelectionAllowed(true);
		infoTable.getTableHeader().setReorderingAllowed(false);
		jScrollPane2.setViewportView(infoTable);
		infoTable.getColumnModel().getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		infoTable.getSelectionModel().addListSelectionListener(new SelectionHandler());

		fileMenu.setText("File");
		jMenuBar1.add(fileMenu);

		viewMenu.setText("View");
		jMenuBar1.add(viewMenu);

		settingsMenu.setText("Settings");

		workspaceSelectionMenuItem.setMnemonic('w');
		workspaceSelectionMenuItem.setText("Workspace");
		workspaceSelectionMenuItem.setToolTipText("Select where the application reads images from.");
		settingsMenu.add(workspaceSelectionMenuItem);

		jMenuBar1.add(settingsMenu);

		helpMenu.setText("Help");
		jMenuBar1.add(helpMenu);

		setJMenuBar(jMenuBar1);

		GroupLayout layout = new GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(
			layout.createParallelGroup(GroupLayout.Alignment.LEADING)
			.addGroup(layout.createSequentialGroup()
			.addContainerGap()
			.addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
			.addGroup(layout.createSequentialGroup()
			.addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
			.addGroup(layout.createSequentialGroup()
			.addComponent(commentLabel, GroupLayout.PREFERRED_SIZE, 57, GroupLayout.PREFERRED_SIZE)
			.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
			.addComponent(commentField, GroupLayout.PREFERRED_SIZE, 174, GroupLayout.PREFERRED_SIZE))
			.addGroup(layout.createSequentialGroup()
			.addComponent(nameField, GroupLayout.PREFERRED_SIZE, 137, GroupLayout.PREFERRED_SIZE)
			.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
			.addComponent(setField, GroupLayout.PREFERRED_SIZE, 119, GroupLayout.PREFERRED_SIZE)))
			.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
			.addComponent(costField, GroupLayout.PREFERRED_SIZE, 52, GroupLayout.PREFERRED_SIZE))
			.addComponent(cardViewPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
			.addGap(15, 15, 15)
			.addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
			.addGroup(layout.createSequentialGroup()
			.addGap(19, 19, 19)
			.addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
			.addComponent(downButton)
			.addComponent(upButton, GroupLayout.PREFERRED_SIZE, 59, GroupLayout.PREFERRED_SIZE))
			.addGap(18, 18, 18)
			.addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
			.addGroup(layout.createSequentialGroup()
			.addComponent(totalCountLabel)
			.addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
			.addComponent(totalCostLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
			.addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
			.addContainerGap())
			.addGroup(layout.createSequentialGroup()
			.addComponent(scanDeckButton, GroupLayout.PREFERRED_SIZE, 179, GroupLayout.PREFERRED_SIZE)
			.addGap(57, 57, 57))))
		);
		layout.setVerticalGroup(
			layout.createParallelGroup(GroupLayout.Alignment.LEADING)
			.addGroup(layout.createSequentialGroup()
			.addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
			.addGroup(layout.createSequentialGroup()
			.addContainerGap()
			.addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
			.addComponent(jScrollPane2)
			.addComponent(cardViewPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
			.addGroup(layout.createSequentialGroup()
			.addGap(142, 142, 142)
			.addComponent(upButton)
			.addGap(120, 120, 120)
			.addComponent(downButton)))
			.addGap(18, 18, Short.MAX_VALUE)
			.addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
			.addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
			.addComponent(nameField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
			.addComponent(setField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
			.addComponent(costField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
			.addComponent(totalCountLabel)
			.addComponent(totalCostLabel))
			.addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
			.addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
			.addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
			.addComponent(commentLabel)
			.addComponent(commentField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
			.addComponent(scanDeckButton, GroupLayout.PREFERRED_SIZE, 34, GroupLayout.PREFERRED_SIZE))
			.addContainerGap(18, Short.MAX_VALUE))
		);

		pack();
	}                    

	private void scanDeckButtonActionPerformed(ActionEvent evt) {                                               
		processor.reset();
	} 

	private void upButtonActionPerformed(ActionEvent evt) {
		DefaultListSelectionModel selector = ((DefaultListSelectionModel)infoTable.getSelectionModel());
		int select = selector.getAnchorSelectionIndex() - 1;
		if(select >= 0){
			selector.setSelectionInterval(select, select);
			selectCard(cards[select]);
		}
		repaint();
	}

	private void downButtonActionPerformed(ActionEvent evt) {                                           
		DefaultListSelectionModel selector = ((DefaultListSelectionModel)infoTable.getSelectionModel());
		int select = selector.getAnchorSelectionIndex() + 1;
		if(select < cards.length){
			selector.setSelectionInterval(select, select);
			selectCard(cards[select]);
		}
		repaint();
	} 

	private void workspaceSelectButtonActionPerformed(ActionEvent evt) {                                           
		JFileChooser fc = new JFileChooser();
		fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
		int returnVal = fc.showOpenDialog(this);

		if(returnVal == JFileChooser.APPROVE_OPTION){
			processor.reset(fc.getSelectedFile().getAbsolutePath());
		}
	}  

	private void selectCard(FileMapping c){
		nameField.setText(c.getCard().getName());
		setField.setText(c.getCard().getSet());
		costField.setText("$" + c.getCard().getPrice()/100 + "." + pad(c.getCard().getPrice(), 2, '0'));
		cardViewPanel.setImage(c.getImage());
		repaint();
	}

	private void clearSelection(){
		nameField.setText("n/a");
		setField.setText("n/a");
		costField.setText("n/a");
		cardViewPanel.setImage(null);
		repaint();
	}

	private Object[] toTableData(Card c){
		return new Object[]{c.getName(), c.getSet(), "$" + c.getPrice()/100 + "." + pad(c.getPrice()%100, 2, '0')};
	}

	/**
	 * 
	 * @param cards an array of cards whose count is NOT 0.
	 */
	public void updateTable(FileMapping[] cards){
		Object[][] o = new Object[cards.length][];
		this.cards = cards;

		int price = 0;

		for(int i = 0; i < cards.length; i++){
			o[i] = toTableData(cards[i].getCard());
			price+= cards[i].getCard().getPrice();
		}

		setData(o);
		totalCostLabel.setText("Value of Scanned Cards: $" + price/100 + "." + pad(price%100, 2, '0'));
		totalCountLabel.setText("Card Count: " + cards.length);

		if(cards.length == 0){
			clearSelection();
		}
	}

	private String pad(int value, int requiredSize, char pad){
		String result = value + "";

		while(result.length() < requiredSize){
			result = pad + result;
		}

		return result;
	}

	private void setData(Object[][] data){
		infoTable.getSelectionModel().clearSelection();

		DefaultTableModel model = (DefaultTableModel)infoTable.getModel();
		while(model.getRowCount() > 0){
			model.removeRow(0);
		}

		for(Object[] row : data){
			model.addRow(row);
		}
	}

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(CardProcessorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(CardProcessorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(CardProcessorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(CardProcessorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		/* Create and display the form */
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				new CardProcessorFrame().setVisible(true);
			}
		});
	}         

	private class CardViewPanel extends JPanel{
		private static final long serialVersionUID = 1L;
		private BufferedImage image;

		public void paintComponent(Graphics g){
			super.paintComponent(g);
			if(image != null)g.drawImage(image.getScaledInstance(getWidth(), getHeight(), Image.SCALE_DEFAULT), 0, 0, getWidth(), getHeight(), null);
		}

		public void setImage(BufferedImage img){
			image = img;
		}
	}

	private class SelectionHandler implements ListSelectionListener {
		public void valueChanged(ListSelectionEvent e) {
			int select = ((DefaultListSelectionModel)e.getSource()).getAnchorSelectionIndex();
			if(select != cards.length)selectCard(cards[select]);
		}
	}
}
